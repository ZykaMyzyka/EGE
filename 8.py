''' вот это дичь задание, считать мне в лом, 
поэтому будем его кодить)
значит в питоне стандартного встроена библиотека itertools
вот вам вырезка из документации того, что нас интересует

product('ABCD', repeat=2) получаем: AA AB AC AD BA BB BC BD CA CB CC CD DA DB DC DD 
значит нам нужно переставить все буквы и они могут повторяться, тогда это юзаем

permutations('ABCD', 2) получаем: AB AC AD BA BC BD CA CB CD DA DB DC 
это просто перестановки, то есть буквы не повторяются (СС - нема)!!!!

combinations('ABCD', 2) получаем: AB AC AD BC BD CD
это комбинации, то есть здесь будет например бд, а дб нет. порядок не важен!

combinations_with_replacement('ABCD', 2) AA AB AC AD BB BC BD CC CD DD
это как и прошлое только есть ещё варианты повторения элементов

ВАЖНО! все эти функции суем в массив для этого оборачиваем в list(),
как увидите ниже

кстати эти штуки нам не нужно их запоминать!!! значит, 
открываем IDLE - Help - Python Docs (или просто жмем F1) 
во всплывшем окошке слево ищем: 
The Python Standard Library
потом в левой части листаем и ищем •Functional Programming Modules
чуть ниже будет itertools, жмем, листаем вниз и все)

так есть ещё штучка называется count(). она считает количество одинаковых элементов 
в строке или не строке...
выглядит так: stroka.count('К') 
также работает с массивами, дальше увидите, как и почему

да, кстати есть такая штука наборы, значит она убирает одинаковые элементы
например:
a = [1,1,1,1,2]
a = list(set(a)) 
а теперь а = [1,2]
вот так вот 
'''



#Примеры
'''Петя составляет шестибуквенные слова перестановкой 
букв слова ЧИУАУА. Сколько всего различных слов может составить Петя?
как видим здесь перестановка...'''
from itertools import permutations # значит используем перестановки 
a = list(set(list (permutations ('ЧИУАУА', 6)))) # питон не понимает что если буквы 
#а поменять местами получиться
#одно и тоже поэтому суем все в набор а потом обратно в массив
print (len(a)) #печатаем количество слов в массиве



'''Игорь составляет таблицу кодовых слов для передачи сообщений, каждому
сообщению соответствует своё кодовое слово. В качестве кодовых слов
Игорь использует трёхбуквенные слова, в которых могут быть только буквы
Ш, К, О, Л, А, причём буква К появляется ровно 1 раз. Каждая из других
допустимых букв может встречаться в кодовом слове любое количество раз
или не встречаться совсем. Сколько различных кодовых слов может
использовать Игорь?
'''
from itertools import product #тут буквы не повторяются поэтому используем это
a = list (product('ШКОЛА',repeat = 3)) # repeat это количество букв в слове
n = 0
for i in range (len(a)): # перебираем полученный массив
	if (a[i].count('К'))==1: # а вот и наш count, считаем кол во букв К
		n+=1
print (n)
#ответ: 48


''' Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном
порядке. Вот начало спискаЖ
1.ААААА
2.ААААО
3.ААААУ
4.АААОА
.......
Запишите слово, которое стоит на 101-м месте от начала списка.
'''
from itertools import product
a = list(product('АОУ', repeat=5))
print (a[100]) # спрашивают 100, но мы помним что массив начинается с 0,
#поэтому 101-1=100
#ответ: ('О', 'А', 'У', 'А', 'О')



''' Все 5-буквенные слова, составленные из букв А, О, У, записаны в алфавитном порядке. Вот начало
списка:
1 ААААА
2 ААААО
3 ААААУ
4 АААОА
……
Укажите номер слова ОАОАО. 
'''
from itertools import product
a = list(product('АОУ', repeat=5)) # значит, элементы списка выглядят так
#('О', 'А', 'У', 'А', 'О')
# можете расскомментить следующую строку и увидеть
# print (a)
print (a.index(('О', 'А', 'О', 'А', 'О'))) # можно попеть)
# не забываем список идет с нуля поэтому +1, ответ: 92



'''Все 5-буквенные слова, составленные из букв А, К, Р, У, записаны в алфавитном порядке. Вот
начало списка:
1 ААААА
2 ААААК
3 ААААР
4 ААААУ
5 АААКА
……
Укажите номер первого слова, которое начинается с буквы У.
'''
from itertools import product
a = list(product('АКРУ', repeat=5))
for i in range (len(a)): #перебираем массив в поиске первого слова с буквы У
	if a[i][0]=='У': #т к массив двумерный то 2 индекса, 0 - т к идем с нуля!!! помним!!! 
		print (i)
		break # как нашли покидаем перебор
# Ответ: 769 (+1, читайте выше)



'''Сколько слов длины 4, начинающихся с согласной буквы, можно составить из букв Л, Е, Т, О?
Каждая буква может входить в слово несколько раз. Слова не обязательно должны быть
осмысленными словами русского языка.'''
from itertools import product
a = list(product('ЛЕТО', repeat=4)) #  в репит длину слова(не забываем)
n = 0 #счетчик
for i in range (len(a)):
	if a[i][0]=='Л' or a[i][0]=='Т': #считаем
		n+=1
print (n) # и выводим кол во



#сколько различных 6-символьных слов может быть 
from itertools import permutations  #тоже самое что и чиуауа, см выше
a = list(set(list (permutations ('ТАРТАР', 6)))) 
print (len(a))




'''Сколько существует различных символьных последовательностей длины 3 в
четырёхбуквенном алфавите {A,B,C,D}, если известно, что одним из соседей A обязательно
является D, а буквы B и C никогда не соседствуют друг с другом?'''
from itertools import product
a = list(product('ABCD', repeat=3))
n = 0
for i in range(len(a)):
	if (a[i][1]=='C' and (a[i][0]=='B' or a[i][2]=='B')) or (a[i][1]=='B' and (a[i][0]=='C' or a[i][2]=='C')): #условие на не соседей BC
		pass # это значит ничего не делаем, просто пропускаем
	else:
		if (a[i][1]=='A' and (a[i][0]=='D' or a[i][2]=='D') and a[i].count('A')<2) or (a[i][1]=='D' and (a[i][0]=='A' or a[i][2]=='A')):# тоже самое на соседа буквы А, 
		#в первом условие общаем внимание на .count  тем самым исключая варианты AAD и DAA 
			n+=1
			print (a[i])
		if a[i].count('A') == 0: #не забываем, что могут быть слова БББ и тп
			n+=1
			print (a[i])
print (n)



'''Все 5-буквенные слова, составленные из букв П, О, Р, Т, записаны в алфавитном
порядке и пронумерованы. Вот начало списка:
1 ООООО
2 ООООП
3 ООООР
4 ООООТ
5 ОООПО
Какое количество слов находятся между словами ТОПОР и РОПОТ (включая эти слова)?'''
from itertools import product
a = list(product('ОПРТ', repeat=5))
print (int(a.index(('Т', 'О', 'П', 'О', 'Р'))-int(a.index(('Р', 'О', 'П', 'О', 'Т')))+1))#9-5=4, 5,6,7,8,9 чисел 5 поэтому +1 
#ропот идет раньше чем топор, буква р в алфавите раньше
# обернул в int, чтобы индексы стали простыми числами (изменил класс объекта) 



'''Иван составляет 5-буквенные слова из букв А, Б, В, Г, Д, Э, Ю, Я. Первой и последней буквами этого
слова могут быть только буквы Э, Ю или Я, на остальных позициях эти буквы не встречаются.
Сколько различных кодовых слов может составить Иван?'''
from itertools import product
a = list(product('АБВГДЭЮЯ', repeat=5))
n = 0
for i in range (len(a)):
	if (a[i][0] == 'Э' or a[i][0] == 'Ю' or a[i][0] == 'Я') and (a[i][4] == 'Э' or a[i][4] == 'Ю' or a[i][4] == 'Я') and \
	(a[i][1] != 'Э' and a[i][1] != 'Ю' and a[i][1] != 'Я') and (a[i][2] != 'Э' and a[i][2] != 'Ю' and a[i][2] != 'Я') and \
	(a[i][3] != 'Э' and a[i][3] != 'Ю' and a[i][3] != 'Я'):
		n+=1
print(n)
#просто длинное условие и всё



'''Палиндром – это символьная строка, которая читается одинаково в обоих
направлениях. Сколько различных 4-символьных палиндромов можно составить из строчных
латинских букв? (В латинском алфавите 26 букв).'''
from itertools import product
a = list(product('QWERTYUIOPASDFGHJKLZXCVBNM', repeat=4))#по клавиатуре тыкать и набрать алфавит)
n = 0
for i in range (len(a)):
	if a[i][0]==a[i][3] and a[i][1]==a[i][2]:
		n+=1
print (n)
# просто понять, что такое палиндром и всё



''' Дано слово КОРАБЛИК. Таня решила составлять новые 6-буквенные слова
из букв этого слова по следующим правилам: 1) слово начинается с согласной буквы; 2) согласные
и гласные буквы в слове должны чередоваться; 3) буквы в слове не должны повторяться. Сколько
существует таких слов?'''
from itertools import permutations
a = list(permutations('КОРАБЛИ',6))#не повторяются значит перестановки, в слове 2 буквы К одну убираем
n=0
for i in range(len(a)):
	if (a[i][0]=='К' or a[i][0]=='Р' or a[i][0]=='Б' or a[i][0]=='Л') and (a[i][2]=='К' or a[i][2]=='Р' or a[i][2]=='Б' or a[i][2]=='Л')\
	and (a[i][4]=='К' or a[i][4]=='Р' or a[i][4]=='Б' or a[i][4]=='Л') and (a[i][1]=='О' or a[i][1]=='А' or a[i][1]=='И')\
	and (a[i][3]=='О' or a[i][3]=='А' or a[i][3]=='И') and (a[i][5]=='О' or a[i][5]=='А' or a[i][5]=='И'):
	    n+=1
print (n)

